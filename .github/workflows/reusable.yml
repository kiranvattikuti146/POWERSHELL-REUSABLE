name: Template Run PowerShell Script e213ff0f-5d5c-4791-802d-52ea3e7be1f1

on:
  workflow_call:
    inputs:
      scriptType:
        required: true
        type: string
        description: "'inlineScript' or 'filePath'"
      scriptName:
        required: false
        type: string
        description: "Path to the script file (required if scriptType is 'filePath')"
      arguments:
        required: false
        type: string
        description: "Arguments to pass to the script"
      inlineScript:
        required: false
        type: string
        description: "Inline PowerShell script (required if scriptType is 'inlineScript')"
      workingFolder:
        required: false
        type: string
        description: "Working folder"
      failOnStandardError:
        required: false
        type: boolean
        default: true
        description: "Fail on standard error"

jobs:
  powershell-task:
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run PowerShell Script
        shell: pwsh
        run: |
          $failOnError = if ('${{ inputs.failOnStandardError }}' -eq 'true') { 'Stop' } else { 'Continue' }

          # Resolve working folder and verify its existence
          $workingFolder = if ('${{ inputs.workingFolder }}' -ne '') { '${{ inputs.workingFolder }}' } else { '.' }
          if (!(Test-Path -Path $workingFolder)) {
            Write-Error "Working folder does not exist: $workingFolder"
            exit 1
          }
          Set-Location -Path $workingFolder

          if ('${{ inputs.scriptType }}' -eq 'inlineScript') {
            Write-Host "Running inline script..."
            Invoke-Expression "${{ inputs.inlineScript }}"
          } elseif ('${{ inputs.scriptType }}' -eq 'filePath') {
            Write-Host "Running script from file path..."
            $scriptPath = "${{ inputs.scriptName }}"
            if (Test-Path $scriptPath) {
              & $scriptPath ${{ inputs.arguments }}
            } else {
              Write-Error "Script file not found: $scriptPath"
              exit 1
            }
          } else {
            Write-Error "Invalid scriptType provided: '${{ inputs.scriptType }}'"
            exit 1
          }
